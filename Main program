def main():
    global steps
    global Board
    global Size
    global Test
    global Type_error
    if Type_error:
        Type_error=False
    else:
        print_board()
    found=False
    x=0
    y=0
    while found != True: #Automated relocate player position
        if Board[x][y] == "P":
            found=True
        else:
            y=y+1
            if y > (Size-1):
                x=x+1
                y=0
                if x > (Size-1):
                    print("System: ERROR")
                    print("System: Player position not found, please restart the game")
                    ans=input("System: Press Enter to exit the game")
                    sys.exit()
    ans=input("System: Please enter the direction you want to move")
    ans=ans.lower()
    if ans == "w": #Move up
        if y > 0 and Board[x][y-1] != "X":
            Board[x][y]=" "
            y=y-1
            steps=steps+1
            if Board[x][y] == "E":
                end()
            else:
                Board[x][y]="P"
        else:
            print("System: Invalid move!")
            print("System: You cannot move up")
            Type_error=True
            main()
    elif ans == "s": #Move down
        if y < (Size-1) and Board[x][y+1] != "X":
            Board[x][y]=" "
            y=y+1
            steps=steps+1
            if Board[x][y] == "E":
                end()
            else:
                Board[x][y]="P"
        else:
            print("System: Invalid move!")
            print("System: You cannot move down")
            Type_error=True
            main()
    elif ans == "a": #Move left
        if x > 0 and Board[x-1][y] != "X":
            Board[x][y]=" "
            x=x-1
            steps=steps+1
            if Board[x][y] == "E":
                end()
            else:
                Board[x][y]="P"
        else:
            print("System: Invalid move!")
            print("System: You cannot move left")
            Type_error=True
            main()
    elif ans == "d": #Move right
        if x < (Size-1) and Board[x+1][y] != "X":
            Board[x][y]=" "
            x=x+1
            steps=steps+1
            if Board[x][y] == "E":
                end()
            else:
                Board[x][y]="P"
        else:
            print("System: Invalid move!")
            print("System: You cannot move right")
            Type_error=True
            main()
    else:
        print("System: Invalid input!")
        print("System: Please enter W, A, S, or D")
        Type_error=True
        main()
    main()

def end():
    global steps
    print("System: Congratulations!")
    print("System: You have exited the maze!")
    print("System: Total steps taken:", steps)
    ans=input("System: Press Enter to exit the game")
    sys.exit()

def print_board():
    global Board
    print("")
    for y in range(Size):
        print(*[Board[i][y] for i in range(Size)])

def build_maze():
    global Board
    global Difficulty 
    global Size
    global Test
    i=2
    if not Test:
        i=1
    if i == 1:
        Board=[[" "] * 21 for n in range(21)]
        print("System: Loading Maze 01...")
        time.sleep(0.1)
        x=0 
        y=0
        for j in range(9):
            Board[x][y]="X"
            x=x+1
        Board[x][y]="P"  #Player starting point
        x=x+1
        for j in range(11):
            Board[x][y]="X"
            x=x+1
        x=0 
        y=1
        Board[x][y]="X"
        x=x+6
        Board[x][y]="X"
        x=x+12
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=0 
        y=2
        Board[x][y]="X"
        x=x+2
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1 
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=x+2
        for j in range(7):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=0
        y=3
        Board[x][y]="X"
        for j in range(4):
            x=x+2
            Board[x][y]="X"
        for j in range(3):
            x=x+4
            Board[x][y]="X"
        x=0
        y=4
        Board[x][y]="X"
        for j in range(3):
            x=x+2
            Board[x][y]="X"
        x=x+2
        for j in range(2):
            Board[x][y]="X"
            x=x+1
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=x+2
        for j in range(7):
            Board[x][y]="X"
            x=x+1
        x=0
        y=5
        Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        for j in range(5):
            x=x+2
            Board[x][y]="X"
        x=x+6
        Board[x][y]="X"
        x=0
        y=6
        for j in range(5):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(5):
            Board[x][y]="X"
            x=x+2
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=0
        y=7
        Board[x][y]="X"
        x=x+4
        for j in range(6):
            Board[x][y]="X"
            x=x+2
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=0
        y=8
        Board[x][y]="X"
        for j in range(6):
            x=x+2
            Board[x][y]="X"
        x=x+2
        for j in range(5):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=0
        y=9
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=x+10
        Board[x][y]="X"
        x=x+4
        x=0
        y=10
        Board[x][y]="X"
        x=x+2
        for j in range(5):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(2):
            Board[x][y]="X"
            x=x+2
        for j in range(5):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=0
        y=11
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        for j in range(2):
            x=x+4
            Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=0
        y=12
        Board[x][y]="X"
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=x+2
        for j in range(5):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=x+2
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=0
        y=13
        Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        x=x+6
        Board[x][y]="X"
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=0
        y=14
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(5):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(3):
            Board[x][y]="X"
            x=x+2
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=0
        y=15
        Board[x][y]="X"
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=x+6
        for j in range(4):
            Board[x][y]="X"
            x=x+2
        x=x+2
        Board[x][y]="X"
        x=0
        y=16
        Board[x][y]="X"
        for j in range(2):
            x=x+2
            Board[x][y]="X"
        x=x+2
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(4):
            Board[x][y]="X"
            x=x+2
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=0
        y=17
        Board[x][y]="X"
        for j in range(2):
            x=x+4
            Board[x][y]="X"
        x=x+6
        Board[x][y]="X"
        x=x+2
        Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        x=0
        y=18
        for j in range(7):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(7):
            Board[x][y]="X"
            x=x+1
        x=x+1
        for j in range(3):
            Board[x][y]="X"
            x=x+1
        x=x+1
        Board[x][y]="X"
        x=0
        y=19
        Board[x][y]="X"
        x=x+10
        Board[x][y]="X"
        x=x+6
        Board[x][y]="X"
        x=x+4
        Board[x][y]="X"
        x=0 
        y=20
        for j in range(11):
            Board[x][y]="X"
            x=x+1
        Board[x][y]="E"  #Exit point
        x=x+1
        for j in range(9):
            Board[x][y]="X"
            x=x+1
        print("System: Maze 01 loaded successfully.")
    elif i == 2: #Loop-erased random walk maze generate algorithm
        mn=str(random.randint(2,999)) #Random generate maze ID
        print("System: Loading Maze 0"+mn+"...")
        time.sleep(0.1)
        x=1
        y=0
        Board[x][y]="P"  #Player starting point
        y=y+1
        Board[x][y]=" "
        Maze=[["F"] * int((Size-1)/2) for n in range(int(Size-1)/2)] #Store the cell that are part of the maze, grid is stored in node form, lines are not included
        Maze[x-1][y]="T"
        Done=False
        while not(Done): #Check is all node included in the maze
            Done=True
            Not_Maze=[] #The cell that are not part of the maze, 1D array
            for h in range(len(Maze)): #x-axis
                for v in range(len(Maze)): #y-axis
                    if Maze[h][v] == "F": #Check is it part of maze
                        Done=False
                        if h<10:
                            temp="0"+str(h)
                        else:
                            temp=str(h)
                        if v<10:
                            temp=temp+"0"+str(v)
                        else:
                            temp=temp+str(v)
                        Not_Maze.append(temp) #Storing the grid in "0519" form as x=5 y=19
            temp=Not_Maze[random.randint(0,len(Not_Maze)-1)]
            Path=[temp] #Stored waked path
            x=int(temp[0:2])
            y=int(temp[2:4])
            while Maze[x][y] != "T":
                retry=False
                Direction=random.randint(1,4) #1:Up 2:Down 3:Left 4:Right
                if Direction == 1:
                    if y-2 < 0:
                        retry=True
                    else:
                        if x<10:
                            temp="0"+str(x)
                        else:
                            temp=str(x)
                        if v<10:
                            temp=temp+"0"+str(y)
                        else:
                            temp=temp+str(y)
                        found=False
                        for c in range(1,len(Path)):
                            if Path[c] == temp:
                                found=True
                        if found:
                            retry=True
                        else:
                            Path.append(temp) #Storing the grid in "0519" form as x=5 y=19
        y=Size-1
        Plot=False
        while not(Plot): #Randomize  the exit position
            x=random.randint(1,(Size-1))
            if x%2 == 0 :
                x=(x%2)+(x//2)+1
                x=x*random.randint(1,2)
                if x%2 == 0 :
                    x=x+1
                if not(x>Size):
                    if Board[x-1][y-1] == "X" or Board[x+1][y-1] == "X": #Making sure the exit is at the end of the path
                        Plot=True
        Board[x][y]="E"  #Exit point
        print("System: Maze 0"+mn+" loaded successfully.")
    main()

import time
import random
import sys
steps=0
Type_error=False
Test=False
print("System: This game is for single players")
time.sleep(1)
print("System: Icon'X' is the wall, and icon ' ' is the path")
time .sleep(1)
print("System: Icon 'P' represent player, and icon 'E' represent exit")
time.sleep(1)
print("System: You can move in four directions")
time.sleep(1)
print("System: Up (W), Down (S), Left (A), Right (D)")
time.sleep(1)
print("System: Every steps you take will be recorded")
time.sleep(1)
print("System: Your goal is to exit the maze with fewest steps")
time.sleep(1)
ans=input("System: Press Enter to start the game")
if ans == "/test":
    test=True
passed=False
while not passed:
    try:
        ans=int(input("Please enter difficulty  1(21*21 Board), 2(31*31 Board), 3(41*41 Board), 4(51*51 Board), 5(61*61 Board)"))
        if ans <=0 or ans >= 6:
            print("System: Out of bounds")
        else:
            passed=True
    except:
        print("System: Formet error")
Difficulty =(ans+1)*5
Size=Difficulty *2+1
Board=[["X"] * Size for i in range(Size)]
print("System: Good luck!")
time.sleep(0.5)
build_maze()
